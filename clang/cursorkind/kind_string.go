// Code generated by "stringer -type=Kind"; DO NOT EDIT.

package cursorkind

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnexposedDecl-1]
	_ = x[StructDecl-2]
	_ = x[UnionDecl-3]
	_ = x[ClassDecl-4]
	_ = x[EnumDecl-5]
	_ = x[FieldDecl-6]
	_ = x[EnumConstantDecl-7]
	_ = x[FunctionDecl-8]
	_ = x[VarDecl-9]
	_ = x[ParmDecl-10]
	_ = x[ObjCInterfaceDecl-11]
	_ = x[ObjCCategoryDecl-12]
	_ = x[ObjCProtocolDecl-13]
	_ = x[ObjCPropertyDecl-14]
	_ = x[ObjCIvarDecl-15]
	_ = x[ObjCInstanceMethodDecl-16]
	_ = x[ObjCClassMethodDecl-17]
	_ = x[ObjCImplementationDecl-18]
	_ = x[ObjCCategoryImplDecl-19]
	_ = x[TypedefDecl-20]
	_ = x[CXXMethod-21]
	_ = x[Namespace-22]
	_ = x[LinkageSpec-23]
	_ = x[Constructor-24]
	_ = x[Destructor-25]
	_ = x[ConversionFunction-26]
	_ = x[TemplateTypeParameter-27]
	_ = x[NonTypeTemplateParameter-28]
	_ = x[TemplateTemplateParameter-29]
	_ = x[FunctionTemplate-30]
	_ = x[ClassTemplate-31]
	_ = x[ClassTemplatePartialSpecialization-32]
	_ = x[NamespaceAlias-33]
	_ = x[UsingDirective-34]
	_ = x[UsingDeclaration-35]
	_ = x[TypeAliasDecl-36]
	_ = x[ObjCSynthesizeDecl-37]
	_ = x[ObjCDynamicDecl-38]
	_ = x[CXXAccessSpecifier-39]
	_ = x[ObjCSuperClassRef-40]
	_ = x[ObjCProtocolRef-41]
	_ = x[ObjCClassRef-42]
	_ = x[TypeRef-43]
	_ = x[CXXBaseSpecifier-44]
	_ = x[TemplateRef-45]
	_ = x[NamespaceRef-46]
	_ = x[MemberRef-47]
	_ = x[LabelRef-48]
	_ = x[OverloadedDeclRef-49]
	_ = x[VariableRef-50]
	_ = x[InvalidFile-70]
	_ = x[NoDeclFound-71]
	_ = x[NotImplemented-72]
	_ = x[InvalidCode-73]
	_ = x[UnexposedExpr-100]
	_ = x[DeclRefExpr-101]
	_ = x[MemberRefExpr-102]
	_ = x[CallExpr-103]
	_ = x[ObjCMessageExpr-104]
	_ = x[BlockExpr-105]
	_ = x[IntegerLiteral-106]
	_ = x[FloatingLiteral-107]
	_ = x[ImaginaryLiteral-108]
	_ = x[StringLiteral-109]
	_ = x[CharacterLiteral-110]
	_ = x[ParenExpr-111]
	_ = x[UnaryOperator-112]
	_ = x[ArraySubscriptExpr-113]
	_ = x[BinaryOperator-114]
	_ = x[CompoundAssignOperator-115]
	_ = x[ConditionalOperator-116]
	_ = x[CStyleCastExpr-117]
	_ = x[CompoundLiteralExpr-118]
	_ = x[InitListExpr-119]
	_ = x[AddrLabelExpr-120]
	_ = x[StmtExpr-121]
	_ = x[GenericSelectionExpr-122]
	_ = x[GNUNullExpr-123]
	_ = x[CXXStaticCastExpr-124]
	_ = x[CXXDynamicCastExpr-125]
	_ = x[CXXReinterpretCastExpr-126]
	_ = x[CXXConstCastExpr-127]
	_ = x[CXXFunctionalCastExpr-128]
	_ = x[CXXTypeidExpr-129]
	_ = x[CXXBoolLiteralExpr-130]
	_ = x[CXXNullPtrLiteralExpr-131]
	_ = x[CXXThisExpr-132]
	_ = x[CXXThrowExpr-133]
	_ = x[CXXNewExpr-134]
	_ = x[CXXDeleteExpr-135]
	_ = x[UnaryExpr-136]
	_ = x[ObjCStringLiteral-137]
	_ = x[ObjCEncodeExpr-138]
	_ = x[ObjCSelectorExpr-139]
	_ = x[ObjCProtocolExpr-140]
	_ = x[ObjCBridgedCastExpr-141]
	_ = x[PackExpansionExpr-142]
	_ = x[SizeOfPackExpr-143]
	_ = x[LambdaExpr-144]
	_ = x[ObjCBoolLiteralExpr-145]
	_ = x[ObjCSelfExpr-146]
	_ = x[OMPArraySectionExpr-147]
	_ = x[ObjCAvailabilityCheckExpr-148]
	_ = x[UnexposedStmt-200]
	_ = x[LabelStmt-201]
	_ = x[CompoundStmt-202]
	_ = x[CaseStmt-203]
	_ = x[DefaultStmt-204]
	_ = x[IfStmt-205]
	_ = x[SwitchStmt-206]
	_ = x[WhileStmt-207]
	_ = x[DoStmt-208]
	_ = x[ForStmt-209]
	_ = x[GotoStmt-210]
	_ = x[IndirectGotoStmt-211]
	_ = x[ContinueStmt-212]
	_ = x[BreakStmt-213]
	_ = x[ReturnStmt-214]
	_ = x[GCCAsmStmt-215]
	_ = x[AsmStmt-215]
	_ = x[ObjCAtTryStmt-216]
	_ = x[ObjCAtCatchStmt-217]
	_ = x[ObjCAtFinallyStmt-218]
	_ = x[ObjCAtThrowStmt-219]
	_ = x[ObjCAtSynchronizedStmt-220]
	_ = x[ObjCAutoreleasePoolStmt-221]
	_ = x[ObjCForCollectionStmt-222]
	_ = x[CXXCatchStmt-223]
	_ = x[CXXTryStmt-224]
	_ = x[CXXForRangeStmt-225]
	_ = x[SEHTryStmt-226]
	_ = x[SEHExceptStmt-227]
	_ = x[SEHFinallyStmt-228]
	_ = x[MSAsmStmt-229]
	_ = x[NullStmt-230]
	_ = x[DeclStmt-231]
	_ = x[OMPParallelDirective-232]
	_ = x[OMPSimdDirective-233]
	_ = x[OMPForDirective-234]
	_ = x[OMPSectionsDirective-235]
	_ = x[OMPSectionDirective-236]
	_ = x[OMPSingleDirective-237]
	_ = x[OMPParallelForDirective-238]
	_ = x[OMPParallelSectionsDirective-239]
	_ = x[OMPTaskDirective-240]
	_ = x[OMPMasterDirective-241]
	_ = x[OMPCriticalDirective-242]
	_ = x[OMPTaskyieldDirective-243]
	_ = x[OMPBarrierDirective-244]
	_ = x[OMPTaskwaitDirective-245]
	_ = x[OMPFlushDirective-246]
	_ = x[SEHLeaveStmt-247]
	_ = x[OMPOrderedDirective-248]
	_ = x[OMPAtomicDirective-249]
	_ = x[OMPForSimdDirective-250]
	_ = x[OMPParallelForSimdDirective-251]
	_ = x[OMPTargetDirective-252]
	_ = x[OMPTeamsDirective-253]
	_ = x[OMPTaskgroupDirective-254]
	_ = x[OMPCancellationPointDirective-255]
	_ = x[OMPCancelDirective-256]
	_ = x[OMPTargetDataDirective-257]
	_ = x[OMPTaskLoopDirective-258]
	_ = x[OMPTaskLoopSimdDirective-259]
	_ = x[OMPDistributeDirective-260]
	_ = x[OMPTargetEnterDataDirective-261]
	_ = x[OMPTargetExitDataDirective-262]
	_ = x[OMPTargetParallelDirective-263]
	_ = x[OMPTargetParallelForDirective-264]
	_ = x[OMPTargetUpdateDirective-265]
	_ = x[OMPDistributeParallelForDirective-266]
	_ = x[OMPDistributeParallelForSimdDirective-267]
	_ = x[OMPDistributeSimdDirective-268]
	_ = x[OMPTargetParallelForSimdDirective-269]
	_ = x[OMPTargetSimdDirective-270]
	_ = x[OMPTeamsDistributeDirective-271]
	_ = x[OMPTeamsDistributeSimdDirective-272]
	_ = x[OMPTeamsDistributeParallelForSimdDirective-273]
	_ = x[OMPTeamsDistributeParallelForDirective-274]
	_ = x[OMPTargetTeamsDirective-275]
	_ = x[OMPTargetTeamsDistributeDirective-276]
	_ = x[OMPTargetTeamsDistributeParallelForDirective-277]
	_ = x[OMPTargetTeamsDistributeParallelForSimdDirective-278]
	_ = x[OMPTargetTeamsDistributeSimdDirective-279]
	_ = x[TranslationUnit-300]
	_ = x[UnexposedAttr-400]
	_ = x[IBActionAttr-401]
	_ = x[IBOutletAttr-402]
	_ = x[IBOutletCollectionAttr-403]
	_ = x[CXXFinalAttr-404]
	_ = x[CXXOverrideAttr-405]
	_ = x[AnnotateAttr-406]
	_ = x[AsmLabelAttr-407]
	_ = x[PackedAttr-408]
	_ = x[PureAttr-409]
	_ = x[ConstAttr-410]
	_ = x[NoDuplicateAttr-411]
	_ = x[CUDAConstantAttr-412]
	_ = x[CUDADeviceAttr-413]
	_ = x[CUDAGlobalAttr-414]
	_ = x[CUDAHostAttr-415]
	_ = x[CUDASharedAttr-416]
	_ = x[VisibilityAttr-417]
	_ = x[DLLExport-418]
	_ = x[DLLImport-419]
	_ = x[NSReturnsRetained-420]
	_ = x[NSReturnsNotRetained-421]
	_ = x[NSReturnsAutoreleased-422]
	_ = x[NSConsumesSelf-423]
	_ = x[NSConsumed-424]
	_ = x[ObjCException-425]
	_ = x[ObjCNSObject-426]
	_ = x[ObjCIndependentClass-427]
	_ = x[ObjCPreciseLifetime-428]
	_ = x[ObjCReturnsInnerPointer-429]
	_ = x[ObjCRequiresSuper-430]
	_ = x[ObjCRootClass-431]
	_ = x[ObjCSubclassingRestricted-432]
	_ = x[ObjCExplicitProtocolImpl-433]
	_ = x[ObjCDesignatedInitializer-434]
	_ = x[ObjCRuntimeVisible-435]
	_ = x[ObjCBoxable-436]
	_ = x[FlagEnum-437]
	_ = x[PreprocessingDirective-500]
	_ = x[MacroDefinition-501]
	_ = x[MacroExpansion-502]
	_ = x[MacroInstantiation-502]
	_ = x[InclusionDirective-503]
	_ = x[ModuleImportDecl-600]
	_ = x[TypeAliasTemplateDecl-601]
	_ = x[StaticAssert-602]
	_ = x[FriendDecl-603]
	_ = x[OverloadCandidate-700]
	_ = x[Back - -1]
	_ = x[FirstDecl-1]
	_ = x[LastDecl-39]
	_ = x[FirstRef-40]
	_ = x[LastRef-50]
	_ = x[FirstInvalid-70]
	_ = x[LastInvalid-73]
	_ = x[FirstExpr-100]
	_ = x[LastExpr-149]
	_ = x[FirstStmt-200]
	_ = x[LastStmt-279]
	_ = x[FirstAttr-400]
	_ = x[LastAttr-437]
	_ = x[FirstPreprocessing-500]
	_ = x[LastPreprocessing-503]
	_ = x[FirstExtraDecl-600]
	_ = x[LastExtraDecl-603]
}

const (
	_Kind_name_0 = "Back"
	_Kind_name_1 = "UnexposedDeclStructDeclUnionDeclClassDeclEnumDeclFieldDeclEnumConstantDeclFunctionDeclVarDeclParmDeclObjCInterfaceDeclObjCCategoryDeclObjCProtocolDeclObjCPropertyDeclObjCIvarDeclObjCInstanceMethodDeclObjCClassMethodDeclObjCImplementationDeclObjCCategoryImplDeclTypedefDeclCXXMethodNamespaceLinkageSpecConstructorDestructorConversionFunctionTemplateTypeParameterNonTypeTemplateParameterTemplateTemplateParameterFunctionTemplateClassTemplateClassTemplatePartialSpecializationNamespaceAliasUsingDirectiveUsingDeclarationTypeAliasDeclObjCSynthesizeDeclObjCDynamicDeclCXXAccessSpecifierObjCSuperClassRefObjCProtocolRefObjCClassRefTypeRefCXXBaseSpecifierTemplateRefNamespaceRefMemberRefLabelRefOverloadedDeclRefVariableRef"
	_Kind_name_2 = "InvalidFileNoDeclFoundNotImplementedInvalidCode"
	_Kind_name_3 = "UnexposedExprDeclRefExprMemberRefExprCallExprObjCMessageExprBlockExprIntegerLiteralFloatingLiteralImaginaryLiteralStringLiteralCharacterLiteralParenExprUnaryOperatorArraySubscriptExprBinaryOperatorCompoundAssignOperatorConditionalOperatorCStyleCastExprCompoundLiteralExprInitListExprAddrLabelExprStmtExprGenericSelectionExprGNUNullExprCXXStaticCastExprCXXDynamicCastExprCXXReinterpretCastExprCXXConstCastExprCXXFunctionalCastExprCXXTypeidExprCXXBoolLiteralExprCXXNullPtrLiteralExprCXXThisExprCXXThrowExprCXXNewExprCXXDeleteExprUnaryExprObjCStringLiteralObjCEncodeExprObjCSelectorExprObjCProtocolExprObjCBridgedCastExprPackExpansionExprSizeOfPackExprLambdaExprObjCBoolLiteralExprObjCSelfExprOMPArraySectionExprObjCAvailabilityCheckExprLastExpr"
	_Kind_name_4 = "UnexposedStmtLabelStmtCompoundStmtCaseStmtDefaultStmtIfStmtSwitchStmtWhileStmtDoStmtForStmtGotoStmtIndirectGotoStmtContinueStmtBreakStmtReturnStmtGCCAsmStmtObjCAtTryStmtObjCAtCatchStmtObjCAtFinallyStmtObjCAtThrowStmtObjCAtSynchronizedStmtObjCAutoreleasePoolStmtObjCForCollectionStmtCXXCatchStmtCXXTryStmtCXXForRangeStmtSEHTryStmtSEHExceptStmtSEHFinallyStmtMSAsmStmtNullStmtDeclStmtOMPParallelDirectiveOMPSimdDirectiveOMPForDirectiveOMPSectionsDirectiveOMPSectionDirectiveOMPSingleDirectiveOMPParallelForDirectiveOMPParallelSectionsDirectiveOMPTaskDirectiveOMPMasterDirectiveOMPCriticalDirectiveOMPTaskyieldDirectiveOMPBarrierDirectiveOMPTaskwaitDirectiveOMPFlushDirectiveSEHLeaveStmtOMPOrderedDirectiveOMPAtomicDirectiveOMPForSimdDirectiveOMPParallelForSimdDirectiveOMPTargetDirectiveOMPTeamsDirectiveOMPTaskgroupDirectiveOMPCancellationPointDirectiveOMPCancelDirectiveOMPTargetDataDirectiveOMPTaskLoopDirectiveOMPTaskLoopSimdDirectiveOMPDistributeDirectiveOMPTargetEnterDataDirectiveOMPTargetExitDataDirectiveOMPTargetParallelDirectiveOMPTargetParallelForDirectiveOMPTargetUpdateDirectiveOMPDistributeParallelForDirectiveOMPDistributeParallelForSimdDirectiveOMPDistributeSimdDirectiveOMPTargetParallelForSimdDirectiveOMPTargetSimdDirectiveOMPTeamsDistributeDirectiveOMPTeamsDistributeSimdDirectiveOMPTeamsDistributeParallelForSimdDirectiveOMPTeamsDistributeParallelForDirectiveOMPTargetTeamsDirectiveOMPTargetTeamsDistributeDirectiveOMPTargetTeamsDistributeParallelForDirectiveOMPTargetTeamsDistributeParallelForSimdDirectiveOMPTargetTeamsDistributeSimdDirective"
	_Kind_name_5 = "TranslationUnit"
	_Kind_name_6 = "UnexposedAttrIBActionAttrIBOutletAttrIBOutletCollectionAttrCXXFinalAttrCXXOverrideAttrAnnotateAttrAsmLabelAttrPackedAttrPureAttrConstAttrNoDuplicateAttrCUDAConstantAttrCUDADeviceAttrCUDAGlobalAttrCUDAHostAttrCUDASharedAttrVisibilityAttrDLLExportDLLImportNSReturnsRetainedNSReturnsNotRetainedNSReturnsAutoreleasedNSConsumesSelfNSConsumedObjCExceptionObjCNSObjectObjCIndependentClassObjCPreciseLifetimeObjCReturnsInnerPointerObjCRequiresSuperObjCRootClassObjCSubclassingRestrictedObjCExplicitProtocolImplObjCDesignatedInitializerObjCRuntimeVisibleObjCBoxableFlagEnum"
	_Kind_name_7 = "PreprocessingDirectiveMacroDefinitionMacroExpansionInclusionDirective"
	_Kind_name_8 = "ModuleImportDeclTypeAliasTemplateDeclStaticAssertFriendDecl"
	_Kind_name_9 = "OverloadCandidate"
)

var (
	_Kind_index_1 = [...]uint16{0, 13, 23, 32, 41, 49, 58, 74, 86, 93, 101, 118, 134, 150, 166, 178, 200, 219, 241, 261, 272, 281, 290, 301, 312, 322, 340, 361, 385, 410, 426, 439, 473, 487, 501, 517, 530, 548, 563, 581, 598, 613, 625, 632, 648, 659, 671, 680, 688, 705, 716}
	_Kind_index_2 = [...]uint8{0, 11, 22, 36, 47}
	_Kind_index_3 = [...]uint16{0, 13, 24, 37, 45, 60, 69, 83, 98, 114, 127, 143, 152, 165, 183, 197, 219, 238, 252, 271, 283, 296, 304, 324, 335, 352, 370, 392, 408, 429, 442, 460, 481, 492, 504, 514, 527, 536, 553, 567, 583, 599, 618, 635, 649, 659, 678, 690, 709, 734, 742}
	_Kind_index_4 = [...]uint16{0, 13, 22, 34, 42, 53, 59, 69, 78, 84, 91, 99, 115, 127, 136, 146, 156, 169, 184, 201, 216, 238, 261, 282, 294, 304, 319, 329, 342, 356, 365, 373, 381, 401, 417, 432, 452, 471, 489, 512, 540, 556, 574, 594, 615, 634, 654, 671, 683, 702, 720, 739, 766, 784, 801, 822, 851, 869, 891, 911, 935, 957, 984, 1010, 1036, 1065, 1089, 1122, 1159, 1185, 1218, 1240, 1267, 1298, 1340, 1378, 1401, 1434, 1478, 1526, 1563}
	_Kind_index_6 = [...]uint16{0, 13, 25, 37, 59, 71, 86, 98, 110, 120, 128, 137, 152, 168, 182, 196, 208, 222, 236, 245, 254, 271, 291, 312, 326, 336, 349, 361, 381, 400, 423, 440, 453, 478, 502, 527, 545, 556, 564}
	_Kind_index_7 = [...]uint8{0, 22, 37, 51, 69}
	_Kind_index_8 = [...]uint8{0, 16, 37, 49, 59}
)

func (i Kind) String() string {
	switch {
	case i == -1:
		return _Kind_name_0
	case 1 <= i && i <= 50:
		i -= 1
		return _Kind_name_1[_Kind_index_1[i]:_Kind_index_1[i+1]]
	case 70 <= i && i <= 73:
		i -= 70
		return _Kind_name_2[_Kind_index_2[i]:_Kind_index_2[i+1]]
	case 100 <= i && i <= 149:
		i -= 100
		return _Kind_name_3[_Kind_index_3[i]:_Kind_index_3[i+1]]
	case 200 <= i && i <= 279:
		i -= 200
		return _Kind_name_4[_Kind_index_4[i]:_Kind_index_4[i+1]]
	case i == 300:
		return _Kind_name_5
	case 400 <= i && i <= 437:
		i -= 400
		return _Kind_name_6[_Kind_index_6[i]:_Kind_index_6[i+1]]
	case 500 <= i && i <= 503:
		i -= 500
		return _Kind_name_7[_Kind_index_7[i]:_Kind_index_7[i+1]]
	case 600 <= i && i <= 603:
		i -= 600
		return _Kind_name_8[_Kind_index_8[i]:_Kind_index_8[i+1]]
	case i == 700:
		return _Kind_name_9
	default:
		return "Kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
