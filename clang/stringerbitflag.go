// generated by stringer -bitflag -table=true ...
// You may not want to edit.

package clang

import "strconv"
import "sync"

type _stringerBitflag struct {
	typename string
	zero     string
	names    string
	first    uint64
	offsets  []uint8
	skips    []uint8
}

type _stringerBitflagCache struct {
	sb     _stringerBitflag
	cached map[uint64]string
	mu     sync.RWMutex
}

func (c *_stringerBitflagCache) mstring(m uint64) string {
	if m == 0 {
		return c.sb.zero
	}
	s, ok := "", false
	c.mu.RLock()
	if c.cached != nil {
		s, ok = c.cached[m]
	}
	c.mu.RUnlock()
	if ok {
		return s
	}
	s = c.sb.mstring(m)
	c.mu.Lock()
	if c.cached == nil || len(c.cached) >= 256 {
		c.cached = make(map[uint64]string, 256)
	}
	c.cached[m] = s
	c.mu.Unlock()
	return s
}

func (sb *_stringerBitflag) mstring(m uint64) string {
	if m == 0 {
		return sb.zero
	}
	var b []byte
	l := len(sb.offsets)
	v := sb.first
	si := 0
	p0 := 0
	p1 := 0
	for i := 0; i < l; i, v = i+1, v<<1 {
		o := sb.offsets[i]
		if o == 0 {
			v <<= sb.skips[si] - 1
			si++
			continue
		}
		p0 = p1
		p1 += int(o)
		if v&m == 0 {
			continue
		}
		m ^= v
		if len(b) == 0 {
			if m == 0 {
				return sb.names[p0:p1]
			}
			b = append(b, '(')
		} else {
			b = append(b, '|')
		}
		b = append(b, sb.names[p0:p1]...)
		if m == 0 {
			b = append(b, ')')
			return string(b)
		}
	}
	s := sb.typename + "(0x" + strconv.FormatUint(uint64(m), 16) + ")"
	if len(b) == 0 {
		return s
	}
	b = append(b, '|')
	b = append(b, s...)
	b = append(b, ')')
	return string(b)
}
